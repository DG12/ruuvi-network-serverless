# Ruuvi Network Serverless v0.01
#
# For full config options: docs.serverless.com

service: ruuvi-network-serverless

custom:
  dynamoTableName: 'RuuviSensorData'
  writerQueueName: 'ruuvi_network'
  lambdaConcurrency: 10

  # TODO: Switch to Role-Based authentication
  databaseEndpoint: "ruuvi-main.cluster-ro-cd69jmnnlqh0.eu-central-1.rds.amazonaws.com"
  databaseName: "ruuvi"
  databaseUsername: "master"
  databasePassword: "VfHWsbhl7iFk7A85iX5W"

  # For auto-scaling: https://www.serverless.com/plugins/serverless-plugin-dynamodb-autoscaling
  dynamoWriteCapacity: 5
  dynamoReadCapacity: 5

provider:
  name: aws
  runtime: nodejs12.x
  profile: ruuvi

  # Defaults
  stage: dev
  region: eu-central-1

  # Permissions (Note: These could be more granular per lambda)
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "logs:CreateLogGroup"
      Resource: { 'Fn::Join': [':', ['arn:aws:logs', { Ref: 'AWS::Region' }, { Ref: 'AWS::AccountId' }, '*']] }
    - Effect: "Allow"
      Action:
        - "logs:CreateLogStream"
        - "logs:PutLogEvents"
      Resource: { 'Fn::Join': [':', ['arn:aws:logs', { Ref: 'AWS::Region' }, { Ref: 'AWS::AccountId' }, 'log-group:/aws/lambda/*writeToDatabase:*']]}
    - Effect: "Allow"
      Action:
        - "sqs:DeleteMessage"
        - "sqs:ReceiveMessage"
        - "sqs:SendMessage"
        - "sqs:GetQueueAttributes"
      Resource: "arn:aws:sqs:*"
    - Effect: "Allow"
      Action:
        - "ec2:CreateNetworkInterface"
        - "ec2:DescribeNetworkInterfaces"
        - "ec2:DeleteNetworkInterface"
      Resource: "*"
    - Effect: "Allow"
      Action:
        - "dynamodb:DeleteItem"
        - "dynamodb:GetItem"
        - "dynamodb:PutItem"
        - "dynamodb:Scan"
        - "dynamodb:UpdateItem"
        - "dynamodb:BatchWriteItem"
        - "dynamodb:UpdateItem"
        - "dynamodb:Query"
      Resource: { 'Fn::Join': [':', ['arn:aws:dynamodb', { Ref: 'AWS::Region' }, { Ref: 'AWS::AccountId' }, 'table/*']] }

# Lambdas
functions:
  # Gateway Facing API
  requestToSQS:
    handler: requestToSQS/requestToSQS.handler
    reservedConcurrency: ${self:custom.lambdaConcurrency}
    events:
      - http: POST record
    environment:
      TARGET_QUEUE: { Ref: GatewayQueue }

  writeToDatabase:
    handler: writeToDatabase/writeToDatabase.handler
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - GatewayQueue
              - Arn
          batchSize: 10
    environment:
      TABLE_NAME: ${self:custom.dynamoTableName}

  # User Facing API
  getSensorData:
    handler: getSensorData/getSensorData.handler
    events:
      - http: GET get
    environment:
      TABLE_NAME: ${self:custom.dynamoTableName}
      ACCESS_KEY: "" # Empty for not required

  getUserData:
    handler: getUserData/getUserData.handler
    reservedConcurrency: ${self:custom.lambdaConcurrency}
    events:
      - http: GET user
    environment:
      ENDPOINT: ${self:custom.databaseEndpoint}
      DATABASE: ${self:custom.databaseName}
      USERNAME: ${self:custom.databaseUsername}
      PASSWORD: ${self:custom.databasePassword}
      
  createUser:
    handler: createUser/createUser.handler
    reservedConcurrency: ${self:custom.lambdaConcurrency}
    events:
      - http: POST register
    environment:
      ENDPOINT: ${self:custom.databaseEndpoint}
      DATABASE: ${self:custom.databaseName}
      USERNAME: ${self:custom.databaseUsername}
      PASSWORD: ${self:custom.databasePassword}
      
# Resources (queues, databases, etc.)
resources:
    Resources:
      GatewayQueue:
        Type: AWS::SQS::Queue
        Properties:
          QueueName: ${self:custom.writerQueueName}
      DynamoSensorData:
        Type: AWS::DynamoDB::Table
        Properties:
          TableName: ${self:custom.dynamoTableName}
          AttributeDefinitions:
            - AttributeName: SensorId
              AttributeType: S
            - AttributeName: MeasurementTimestamp
              AttributeType: N
          KeySchema:
            - AttributeName: SensorId
              KeyType: HASH
            - AttributeName: MeasurementTimestamp
              KeyType: RANGE
          ProvisionedThroughput:
            ReadCapacityUnits: ${self:custom.dynamoReadCapacity}
            WriteCapacityUnits: ${self:custom.dynamoWriteCapacity}
