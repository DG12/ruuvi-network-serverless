# Ruuvi Network Serverless v0.02
#
# For full config options: docs.serverless.com

service: ruuvi-network-serverless

plugins:
  - serverless-dynamodb-autoscaling

custom:
  dynamoTableName: 'SensorData'
  writerQueueName: 'ruuvi_network'
  gatewayReceiverLambdaConcurrency: 100 # Separate due to higher requirements
  lambdaConcurrency: 10

  sourceEmail: 'sami@muhwu.com'
  invitationExpirationInterval: 5 # minutes after requested
  requireLoginForData: 0
  gatewaySendRate: 60 # every X seconds

  # TODO: Switch to Role-Based authentication
  databaseEndpoint: "ruuvi-main.cluster-ro-cd69jmnnlqh0.eu-central-1.rds.amazonaws.com"
  databaseName: "ruuvi"
  databaseUsername: "admin"
  databasePassword: "VfHWsbhl7iFk7A85iX5W"

  # For auto-scaling: https://www.serverless.com/plugins/serverless-plugin-dynamodb-autoscaling
  dynamoWriteCapacity: 5
  dynamoReadCapacity: 5

  # Dynamo Auto-Scaling Configuration
  capacities:
    - table: DynamoSensorData  # DynamoDB Resource
      read:
        minimum: 25       # Minimum read capacity
        maximum: 1000     # Maximum read capacity
        usage: 0.2        # Targeted usage percentage
      write:
        minimum: 15       # Minimum write capacity
        maximum: 1000     # Maximum write capacity
        usage: 0.2        # Targeted usage percentage

provider:
  name: aws
  runtime: nodejs12.x
  profile: ruuvi

  # Defaults
  stage: dev
  region: eu-central-1

  # Permissions (Note: These could be more granular per lambda)
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "logs:CreateLogGroup"
      Resource: { 'Fn::Join': [':', ['arn:aws:logs', { Ref: 'AWS::Region' }, { Ref: 'AWS::AccountId' }, '*']] }
    - Effect: "Allow"
      Action:
        - "logs:CreateLogStream"
        - "logs:PutLogEvents"
      Resource: { 'Fn::Join': [':', ['arn:aws:logs', { Ref: 'AWS::Region' }, { Ref: 'AWS::AccountId' }, 'log-group:/aws/lambda/*writeToDatabase:*']]}
    - Effect: "Allow"
      Action:
        - "sqs:DeleteMessage"
        - "sqs:ReceiveMessage"
        - "sqs:SendMessage"
        - "sqs:GetQueueAttributes"
      Resource: "arn:aws:sqs:*"
    - Effect: "Allow"
      Action:
        - "ec2:CreateNetworkInterface"
        - "ec2:DescribeNetworkInterfaces"
        - "ec2:DeleteNetworkInterface"
      Resource: "*"
    - Effect: "Allow"
      Action:
        - "dynamodb:DeleteItem"
        - "dynamodb:GetItem"
        - "dynamodb:PutItem"
        - "dynamodb:Scan"
        - "dynamodb:UpdateItem"
        - "dynamodb:BatchWriteItem"
        - "dynamodb:UpdateItem"
        - "dynamodb:Query"
      Resource: { 'Fn::Join': [':', ['arn:aws:dynamodb', { Ref: 'AWS::Region' }, { Ref: 'AWS::AccountId' }, 'table/*']] }
    - Effect: "Allow"
      Action:
        - "ses:SendEmail"
        - "ses:SendRawEmail"
      Resource: "*"

# Lambdas
functions:
  # Gateway Facing API
  requestToSQS:
    handler: GatewayApi/requestToSQS.handler
    #reservedConcurrency: ${self:custom.gatewayReceiverLambdaConcurrency}
    events:
      - http: POST /record
      - httpApi:
          method: POST
          path: /record
    environment:
      GATEWAY_SEND_RATE: ${self:custom.gatewaySendRate}
      TARGET_QUEUE: { Ref: GatewayQueue }

  writeToDatabase:
    handler: GatewayApi/writeToDatabase.handler
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - GatewayQueue
              - Arn
          batchSize: 10
    environment:
      TABLE_NAME: ${self:custom.dynamoTableName}

  # User Facing API
  getSensorData:
    handler: UserApi/getSensorData.handler
    events:
      - http:
          path: get
          method: get
          cors: true
      - httpApi:
          method: GET
          path: /get
          #payload: '2.0'

    environment:
      TABLE_NAME: ${self:custom.dynamoTableName}
      REQUIRE_LOGIN: ${self:custom.requireLoginForData}
      DEFAULT_RESULTS: 15
      ENDPOINT: ${self:custom.databaseEndpoint}
      DATABASE: ${self:custom.databaseName}
      USERNAME: ${self:custom.databaseUsername}
      PASSWORD: ${self:custom.databasePassword}

  getUserData:
    handler: UserApi/getUserData.handler
    #reservedConcurrency: ${self:custom.lambdaConcurrency}
    events:
      - http:
          path: user
          method: get
          cors: true
      - httpApi:
          method: GET
          path: /user
          #payload: '2.0'
    environment:
      ENDPOINT: ${self:custom.databaseEndpoint}
      DATABASE: ${self:custom.databaseName}
      USERNAME: ${self:custom.databaseUsername}
      PASSWORD: ${self:custom.databasePassword}

  requestRegistration:
    handler: UserApi/requestRegistration.handler
    #reservedConcurrency: ${self:custom.lambdaConcurrency}
    events:
      - http:
          path: register
          method: post
          cors: true
      - httpApi:
          method: POST
          path: /register

    environment:
      ENDPOINT: ${self:custom.databaseEndpoint}
      DATABASE: ${self:custom.databaseName}
      USERNAME: ${self:custom.databaseUsername}
      PASSWORD: ${self:custom.databasePassword}
      INVITATION_EXPIRATION_INTERVAL: ${self:custom.invitationExpirationInterval}
      SOURCE_EMAIL: ${self:custom.sourceEmail}
      BASE_API_URL:
        !Join
          - ''
          - - 'https://'
            - !Ref ApiGatewayRestApi
            - '.execute-api.'
            - ${opt:region, self:provider.region}
            - '.amazonaws.com/'
            - ${opt:stage, self:provider.stage}

  verifyUser:
    handler: UserApi/verifyUser.handler
    #reservedConcurrency: ${self:custom.lambdaConcurrency}
    events:
      - http:
          path: verify
          method: get
          cors: true
      - httpApi:
          method: GET
          path: /verify
          #payload: '2.0'
    environment:
      ENDPOINT: ${self:custom.databaseEndpoint}
      DATABASE: ${self:custom.databaseName}
      USERNAME: ${self:custom.databaseUsername}
      PASSWORD: ${self:custom.databasePassword}

  claimTag:
    handler: UserApi/claimTag.handler
    #reservedConcurrency: ${self:custom.lambdaConcurrency}
    events:
      - http:
          path: claim
          method: post
          cors: true
      - httpApi:
          method: POST
          path: /claim
          #payload: '2.0'
    environment:
      ENDPOINT: ${self:custom.databaseEndpoint}
      DATABASE: ${self:custom.databaseName}
      USERNAME: ${self:custom.databaseUsername}
      PASSWORD: ${self:custom.databasePassword}

  shareTag:
    handler: UserApi/shareTag.handler
    #reservedConcurrency: ${self:custom.lambdaConcurrency}
    events:
      - http:
          path: share
          method: post
          cors: true
      - httpApi:
          method: POST
          path: /share
          #payload: '2.0'
    environment:
      ENDPOINT: ${self:custom.databaseEndpoint}
      DATABASE: ${self:custom.databaseName}
      USERNAME: ${self:custom.databaseUsername}
      PASSWORD: ${self:custom.databasePassword}

  # NOTE: Workaround for CORS preflight requests
  corsOptions:
    handler: UserApi/corsHelper.handler
    events:
      - httpApi:
          method: OPTIONS
          path: /register
      - httpApi:
          method: OPTIONS
          path: /claim
      - httpApi:
          method: OPTIONS
          path: /share
      - httpApi:
          method: OPTIONS
          path: /verify
      - httpApi:
          method: OPTIONS
          path: /get
      - httpApi:
          method: OPTIONS
          path: /user

# Resources (queues, databases, etc.)
resources:
    Resources:
      GatewayQueue:
        Type: AWS::SQS::Queue
        Properties:
          QueueName: ${self:custom.writerQueueName}
      DynamoSensorData:
        Type: AWS::DynamoDB::Table
        Properties:
          TableName: ${self:custom.dynamoTableName}
          AttributeDefinitions:
            - AttributeName: SensorId
              AttributeType: S
            - AttributeName: MeasurementTimestamp
              AttributeType: N
          KeySchema:
            - AttributeName: SensorId
              KeyType: HASH
            - AttributeName: MeasurementTimestamp
              KeyType: RANGE
          ProvisionedThroughput:
            ReadCapacityUnits: ${self:custom.dynamoReadCapacity}
            WriteCapacityUnits: ${self:custom.dynamoWriteCapacity}
